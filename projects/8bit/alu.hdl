// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/8bit/alu.hdl

/*
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 8-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the alu computes two 1-bit outputs:
 * if the alu output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the alu output < 0, ng is set to 1; otherwise ng is set to 0.
*/

/*
 * Implementation: the alu logic manipulates the x and y inputs
 * and operates on the resulting values, as follows:
 * if (zx == 1) set x = 0        // 8-bit constant
 * if (nx == 1) set x = !x       // bitwise not
 * if (zy == 1) set y = 0        // 8-bit constant
 * if (ny == 1) set y = !y       // bitwise not
 * if (f == 1)  set out = x + y  // integer 2's complement addition
 * if (f == 0)  set out = x & y  // bitwise and
 * if (no == 1) set out = !out   // bitwise not
 * if (out == 0) set zr = 1
 * if (out < 0) set ng = 1
*/

CHIP alu {
    IN  
        x[8], y[8],  	/* 8-bit inputs    								*/ 
        zx, 			/* zero the x input?							*/
        nx, 			/* negate the x input?    	 					*/
        zy, 			/* zero the y input?							*/
        ny, 			/* negate the y input?							*/
        f,  			/* compute out = x + y (if 1) or x & y (if 0)	*/
        no; 			/* negate the out output?						*/

    OUT 
        out[8], 		/* 8-bit output						*/
        zr, 			/* 1 if (out == 0), 0 otherwise		*/
        ng; 			/* 1 if (out < 0),  0 otherwise		*/

    PARTS:
	mux8(a=x, b=false, sel=zx, out=x1);
	not8(in=x1, out=notx1);
	mux8(a=x1, b=notx1, sel=nx, out=tx);

	mux8(a=y, b=false, sel=zy, out=y1);
	not8(in=y1, out=noty1);
	mux8(a=y1, b=noty1, sel=ny, out=ty);

	and8(a=tx, b=ty, out=tand);
	add8(a=tx, b=ty, out=tadd);
	mux8(a=tand, b=tadd, sel=f, out=t);

	not8(in=t, out=nott);
	mux8(a=t, b=nott, sel=no, out=out, out[7]=ng, out=o1);
	
	or8way(in=o1, out=notzr);
	not(in=notzr, out=zr);
}
