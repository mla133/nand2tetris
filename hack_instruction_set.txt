A-Instruction: (sets A register to a 15bit value)

  |-----value (v=0 or 1)------|
0 v v v v v v v v v v v v v v v 

C-Instruction: (dest=comp;jump)
	if dest is empty, the "=" can be omitted
	if jump is empty, the ";" can be omitted

      |------comp-------| |-dest-| |-jump-|
1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3


Computation Specification:
	D: Data register
	A: A register
	M: Memory[A] (memory register addressed by A)

(when a=0)								(when a=1)
comp mnemonic	c1	c2	c3	c4	c5	c6	comp mnemonic
	0	1	0	1	0	1	0	
	1	1	1	1	1	1	1
	-1	1	1	1	0	1	0	
	D 	0	0	1	1	0	0
	A 	1	1	0	0	0	0		M
	!D 	0	0	1	1	0	1
	!A 	1	1	0	0	1	1		!M
	-D 	0	0	1	1	1	1			
	-A 	1	1	0	0	1	1		-M
	D+1 	0	1	1	1	1	1
	A+1 	1	1	0	1	1	1		M+1
	D-1	0	0	1	1	1	0
	A-1 	1	1	0	0	1	0		M-1
	D+A	0	0	0	0	1	0		D+M
	D-A 	0	1	0	0	1	1		D-M
	A-D 	0	0	0	1	1	1		M-D
	D&A 	0	0	0	0	0	0		D&M
	D|A	0	1	0	1	0	1		D|M

Destination Specification:

	d1 d2 d3	Mnemonic 		Destination
	 0  0  0	null			value isn't stored
	 0  0  1 	M 			Memory[A]
	 0  1  0 	D 			D register
	 0  1  1  	MD 			Memory[A] and D register
	 1  0  0 	A 			A register
	 1  0  1 	AM 			A register and Memory[A]
	 1  1  0 	AD 			A register and D register
	 1  1  1 	AMD 			A reg, D reg, and Memory[A]

Jump Specification:

	j1 j2 j3	Mnemonic 		Effect
	 0  0  0	null			no jump	
	 0  0  1 	JGT			if out>0, jump	
	 0  1  0 	JEQ 			if out=0, jump 				
	 0  1  1  	JGE 			if out>=0, jump	
	 1  0  0 	JLT 			if out<0, jump	
	 1  0  1 	JNE 			if out<>0, jump	
	 1  1  0 	JLE 			if out<=0, jump 
	 1  1  1 	JMP 			jump	